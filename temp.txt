import whisper
import sounddevice as sd
import wavio as wv
import time
import threading
import os.path

filename = "audio"
recSignal = True

# Sampling frequency
freq = 44100

# Recording duration
duration = 2

# Select model for use
model = whisper.load_model("small")

# Create an event to signal when recording is done
recording_done_event = threading.Event()


def record():
    i = 0
    t_end = time.time() + 15
    while time.time() < t_end:
        # Start recorder with the given values
        # of duration and sample frequency
        recording = sd.rec(int(duration * freq),
                           samplerate=freq, channels=2)

        # Record audio for the given number of seconds
        sd.wait()

        # Convert the NumPy array to audio file
        wav_filename = f"{filename}{i}.wav"
        wv.write(wav_filename, recording, freq, sampwidth=2)

        if os.path.exists(wav_filename):
            i += 1

            # Signal that recording is done and a .wav file has been created
            if i == 1:
                recording_done_event.set()


def transcribe():
    while True:
        if recording_done_event.is_set():
            i = 0
            while os.path.exists(f"{filename}{i}.wav"):
                result = model.transcribe(f"{filename}{i}.wav", language="dutch", fp16=False, verbose=True)
                print(f"{filename}{i}.wav" + " --> " + result["text"])
                i += 1
            # Reset the event to wait for the next recording
            recording_done_event.clear()
        else:
            time.sleep(0.25)  # Sleep for a second before checking again


if __name__ == "__main__":
    t1 = threading.Thread(target=record)
    t2 = threading.Thread(target=transcribe)

    # starting thread 1
    print("Start")
    t1.start()
    # starting thread 2
    t2.start()
